package NuGet_Kotlin_Miruken.patches.buildTypes

import jetbrains.buildServer.configs.kotlin.v2017_2.*
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.PowerShellStep
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.VisualStudioStep
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.powerShell
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.visualStudio
import jetbrains.buildServer.configs.kotlin.v2017_2.buildSteps.vstest
import jetbrains.buildServer.configs.kotlin.v2017_2.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with uuid = '2847660e-819a-481f-924f-db2309e9d912_ReleaseBuild' (id = 'NuGet_Kotlin_Miruken_MirukenMvcSln_ReleaseBuild')
accordingly and delete the patch script.
*/
changeBuildType("2847660e-819a-481f-924f-db2309e9d912_ReleaseBuild") {
    expectSteps {
        step {
            name = "Restore NuGet Packages"
            type = "jb.nuget.installer"
            param("nuget.path", "%teamcity.tool.NuGet.CommandLine.DEFAULT%")
            param("nuget.sources", "%PackageSources%")
            param("nuget.updatePackages.mode", "sln")
            param("sln.path", "%Solution%")
            param("toolPathSelector", "%teamcity.tool.NuGet.CommandLine.DEFAULT%")
        }
        visualStudio {
            name = "CompileStep"
            path = "%Solution%"
            version = VisualStudioStep.VisualStudioVersion.vs2017
            runPlatform = VisualStudioStep.Platform.x86
            msBuildVersion = VisualStudioStep.MSBuildVersion.V15_0
            msBuildToolsVersion = VisualStudioStep.MSBuildToolsVersion.V15_0
            targets = "%BuildTargets%"
            configuration = "%BuildConfiguration%"
            platform = "Any CPU"
        }
        vstest {
            vstestPath = "%teamcity.dotnet.vstest.14.0%"
            includeTestFileNames = "%TestAssemblies%"
            runSettings = ""
            testCaseFilter = "%TestCaseFilter%"
            coverage = dotcover {
                toolPath = "%teamcity.tool.JetBrains.dotCover.CommandLineTools.bundled%"
            }
        }
        powerShell {
            name = "Tag Build From Master Branch"
            platform = PowerShellStep.Platform.x86
            edition = PowerShellStep.Edition.Desktop
            scriptMode = script {
                content = """
                    ${'$'}branch = "%teamcity.build.branch%"
                    
                    if(${'$'}branch -ne "master") { return 0 }
                    
                    ${'$'}tag = "%SemanticVersion%"
                    Write-Host "Taging build ${'$'}tag"
                    
                    git tag ${'$'}tag
                    git push origin ${'$'}tag
                """.trimIndent()
            }
            noProfile = false
        }
        powerShell {
            name = "Increment PatchVersion And Reset Build Counters"
            platform = PowerShellStep.Platform.x86
            edition = PowerShellStep.Edition.Desktop
            scriptMode = script {
                content = """
                    ${'$'}baseUri           = "localhost"
                    ${'$'}projectId         = "%SolutionProjectId%"
                    ${'$'}preReleaseBuildId = "%PreReleaseProjectId%"
                    ${'$'}releaseBuildId    = "%ReleaseProjectId%"
                    ${'$'}branch            = "%teamcity.build.branch%"
                    ${'$'}username          = "%teamcityApiUserName%"
                    ${'$'}password          = "%teamcityApiPassword%"
                    ${'$'}base64AuthInfo    = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f ${'$'}username,${'$'}password)))
                    
                    Write-Host "temp ${'$'}username ${'$'}password"
                    
                    if(${'$'}branch -ne "master") {return 0};
                    
                    function Increment-ProjectPatchVersion (${'$'}projectId) {
                        #get PatchVersion
                        ${'$'}paramUri    ="${'$'}baseUri/httpAuth/app/rest/projects/id:${'$'}projectId/parameters/PatchVersion"
                        Write-Host ${'$'}paramUri
                        ${'$'}paramResult = Invoke-RestMethod -Headers @{Authorization=("Basic {0}" -f ${'$'}base64AuthInfo)} -Method Get -Uri ${'$'}paramUri
                    
                        #increment PatchVersion
                        ${'$'}newPatchVersion = ([int]${'$'}paramResult.property.value) + 1
                        ${'$'}updateResult    = Invoke-RestMethod -Headers @{Authorization=("Basic {0}" -f ${'$'}base64AuthInfo);"Content-Type"="text/plain"} -Method Put -Uri ${'$'}paramUri -Body ${'$'}newPatchVersion
                        Write-Host "Project ${'$'}projectId PatchVersion parameter incremented to ${'$'}newPatchVersion"
                    }
                    
                    function Reset-BuildCounter(${'$'}buildId) {
                        ${'$'}buildCounterUri = "${'$'}baseUri/httpAuth/app/rest/buildTypes/id:${'$'}buildId/settings/buildNumberCounter"
                        Write-Host ${'$'}buildCounterUri
                        ${'$'}updateResult    = Invoke-RestMethod -Headers @{Authorization=("Basic {0}" -f ${'$'}base64AuthInfo);"Content-Type"="text/plain"} -Method Put -Uri ${'$'}buildCounterUri -Body 0
                        Write-Host "Reset build counter for ${'$'}(${'$'}_.name)"
                    }
                    
                    Increment-ProjectPatchVersion ${'$'}projectId
                    Reset-BuildCounter            ${'$'}preReleaseBuildId
                    Reset-BuildCounter            ${'$'}releaseBuildId
                """.trimIndent()
            }
            noProfile = false
        }
    }
    steps {
        insert(0) {
            powerShell {
                name = "Check For Prerelease Dependency"
                formatStderrAsError = true
                scriptMode = script {
                    content = """
                        try{
                            ${'$'}packageConfigs = @(Get-ChildItem -Path .\ -Recurse -Include packages.config)
                            foreach(${'$'}packageConfig in ${'$'}packageConfigs )
                            {
                                ${'$'}text = Get-Content ${'$'}packageConfig -Raw
                                ${'$'}keywords = @("prerelease", "alpha", "beta")
                                foreach(${'$'}keyword in ${'$'}keywords){
                                    if(${'$'}text -like "*${'$'}keyword*") {
                                        throw "Prerelease dependency found in ${'$'}(${'$'}packageConfig.FullName)"
                                    }
                                }
                            }
                        
                            return 0
                        } catch {
                            Write-Error ${'$'}_
                            Write-Host "##teamcity[buildStatus status='FAILURE']"
                            return 1
                        }
                    """.trimIndent()
                }
            }
        }
    }
}
